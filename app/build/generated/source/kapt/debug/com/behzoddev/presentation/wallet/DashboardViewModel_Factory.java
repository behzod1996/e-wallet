// Generated by Dagger (https://dagger.dev).
package com.behzoddev.presentation.wallet;

import com.behzoddev.e_wallet.domain.interactor.DeleteTransactionUseCase;
import com.behzoddev.e_wallet.domain.interactor.GetAllTransactionsUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DashboardViewModel_Factory implements Factory<WalletViewModel> {
  private final Provider<GetAllTransactionsUseCase> getAllTransactionsProvider;

  private final Provider<DeleteTransactionUseCase> deleteTransactionProvider;

  public DashboardViewModel_Factory(Provider<GetAllTransactionsUseCase> getAllTransactionsProvider,
      Provider<DeleteTransactionUseCase> deleteTransactionProvider) {
    this.getAllTransactionsProvider = getAllTransactionsProvider;
    this.deleteTransactionProvider = deleteTransactionProvider;
  }

  @Override
  public WalletViewModel get() {
    return newInstance(getAllTransactionsProvider.get(), deleteTransactionProvider.get());
  }

  public static DashboardViewModel_Factory create(
      Provider<GetAllTransactionsUseCase> getAllTransactionsProvider,
      Provider<DeleteTransactionUseCase> deleteTransactionProvider) {
    return new DashboardViewModel_Factory(getAllTransactionsProvider, deleteTransactionProvider);
  }

  public static WalletViewModel newInstance(GetAllTransactionsUseCase getAllTransactions,
                                            DeleteTransactionUseCase deleteTransaction) {
    return new WalletViewModel(getAllTransactions, deleteTransaction);
  }
}
